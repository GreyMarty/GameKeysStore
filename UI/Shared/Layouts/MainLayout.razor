@using UI.Authentication
@inherits LayoutComponentBase

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<MudLayout>
    <MudAppBar Elevation="2">
        <MudText Typo="Typo.h4" Class="px-4">Blazing Key</MudText>
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" EndIcon="@Icons.Material.Filled.Logout" OnClick="SignOutAsync">Sign Out</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Variant="Variant.Outlined" Color="Color.Tertiary" EndIcon="@Icons.Material.Filled.Login" OnClick="SignIn">Sign In</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <AuthorizeView>
        <Authorized>
            <MudMainContent Class="pt-16 px-16">
                <MudContainer Class="my-16">
                        @Body
                </MudContainer>
            </MudMainContent>
        </Authorized>
        <NotAuthorized>
            @{ NavigationManager.NavigateTo("/login"); }
        </NotAuthorized>
    </AuthorizeView>
</MudLayout>

<MudThemeProvider IsDarkMode="true"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@code {
    private CustomAuthenticationStateProvider? _authenticationStateProvider;

    protected override async Task OnInitializedAsync()
    {
        _authenticationStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
    }

    private async Task SignOutAsync()
    {
        await _authenticationStateProvider!.LogOutAsync();
        NavigationManager.NavigateTo("/");
    }

    private void SignIn()
    {
        NavigationManager.NavigateTo("/login");
    }
}